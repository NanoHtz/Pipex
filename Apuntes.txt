El objetivo de pipex es que un proceso hijo ejecute un comando y su salida se pase a otro proceso usando un pipe.

pipe() -> Crea una relacion unidireccional entre procesos, la salida de uno, es la entrada de otro.
Es un buffer temporal en la MEMORIA.
fork() -> Crea un proceso hijo copiando al padre, ejecutan el mismo código, pero devuelven valores diferentes.
-> En el proceso hijo, fork devuelve 0
-> En el proceso padre, fork devuelve el PID del hijo.
-> Si falla devuelve -1.

¡Ambos procesos se ejecutan en paralelo, luego ante varios prints(por ejemplo), la manera en que se imprimen puede verse alterada!

wait() -> Esta funcion permite que un proceso padre espere hasta que su hijo termine con el proceso.
waitpid() -> Es la version mas flexible de wait(), por que selecciona a un hijo específico del proceso.

Despues de entender estos procesos.
Tenemos que entender

execve() -> Permite ejecutar programas externos en C, por ejemplo llamar al ls de shell
dup2() -> permite redirigir la entrada (stdin) y la salida (stdout) de un proceso.

envp -> es una array de strings del sistema, donde todas tienen la forma "VARIABLE=valor"
-> Dentro buscamos la variable "PATH=" que nos dara las posibles rutas del comando
-> en find path, buscamos en los directorios las rutas adecuadas, aquellas que comienzan con path
-> despues dividimos todas las rutas que aparecen entre : con el split en un nuevo array

Explicacion del codigo:

Main:

Primero comprueba que los argumentos sean exactamente 5, si no, devuelve un mensaje de error diciendolo.
Despues Ejecuta la funcion ft_open, donde se reserva memoria para la estructura de archivos y se abren ambos.
Luego crea el pipe, una relacion unidireccional entre procesos, en este caso entre nuestros dos descriptores de archivo fd
fd[0] lee datos y fd[1] los escribe, al hacer "cat" "wc -l", cat, el proceso hijo escribe en el fd y wc lee
Con fork, creamos un proceso hijo, una copia exacta del proceso padre que se ejecuta en paralelo, sin embargo , nosotros añadiremps el wait para asegurarnos
de que el descriptor de archivo donde se lee, tiene algo que leer
Despues simplemente sabemos que si pid == 0 estamos ante el proceso hijo, si no estamos ante el proceso padre, a partir de ahi se ejecutan
los distintos codigos para los procesos.
En estos procesos tenemos la redireccion de las salidas y las entradas, y cierra los fd que no se usan en los procesos.
despues ejecuta el comando, y es quizas lo mas importante
envp, es un doble puntero que almacena la ruta de las variables de entorno
y lo importante dentro de envp es "PATH" palabra clave, puesto que es esas rutas se almacenan los ejecutables
Ese es el primer bucle, cuando llega a los path, para i le hace un split, con : como separador y saltandose las 5 primeras letras las de path
despues con join, construimos la posible ruta, añadiendo / y el comando
Comprueba que el archivo exista con acces, si existe, devuelve la rita completa.
despues libera todos los arrays
