El objetivo de pipex es que un proceso hijo ejecute un comando y su salida se pase a otro proceso usando un pipe.

pipe() -> Crea una relacion unidireccional entre procesos, la salida de uno, es la entrada de otro.
Es un buffer temporal en la MEMORIA.
fork() -> Crea un proceso hijo copiando al padre, ejecutan el mismo código, pero devuelven valores diferentes.
-> En el proceso hijo, fork devuelve 0
-> En el proceso padre, fork devuelve el PID del hijo.
-> Si falla devuelve -1.

¡Ambos procesos se ejecutan en paralelo, luego ante varios prints(por ejemplo), la manera en que se imprimen puede verse alterada!

wait() -> Esta funcion permite que un proceso padre espere hasta que su hijo termine con el proceso.
waitpid() -> Es la version mas flexible de wait(), por que selecciona a un hijo específico del proceso.

Despues de entender estos procesos.
Tenemos que entender

execve() -> Permite ejecutar programas externos en C, por ejemplo llamar al ls de shell
dup2() -> permite redirigir la entrada (stdin) y la salida (stdout) de un proceso.

envp -> es una array de strings del sistema, donde todas tienen la forma "VARIABLE=valor"
-> Dentro buscamos la variable "PATH=" que nos dara las posibles rutas del comando
-> en find path, buscamos en los directorios las rutas adecuadas, aquellas que comienzan con path
-> despues dividimos todas las rutas que aparecen entre : con el split en un nuevo array

Explicacion del codigo:

Main:

Primero comprueba que los argumentos sean exactamente 5, si no, devuelve un mensaje de error diciendolo.
Despues abre el archivo infile, que nosotros no creamos, si no que lo da el evaluador.
En caso de fallo, devuelve un mensaje de error
